class Solution:
    def __init__(self):
        self.dp = {}

    def LCS(self, a, b, i, j):
        if i == len(a) or j == len(b):
            return 0
        
        if (i, j) in self.dp:
            return self.dp[(i, j)]
        
        if a[i] == b[j]:
            self.dp[(i, j)] = 1 + self.LCS(a, b, i + 1, j + 1)
        else:
            self.dp[(i, j)] = max(self.LCS(a, b, i, j + 1), self.LCS(a, b, i + 1, j))
        
        return self.dp[(i, j)]

    def longestPalinSubseq(self, s):
        self.dp = {}  
        rev = s[::-1] 
        return self.LCS(s, rev, 0, 0)
