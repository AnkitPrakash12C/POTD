from typing import List

class Solution:
    def closestPrimes(self, left: int, right: int) -> List[int]:
        LIMIT = 10**6
        is_prime = [True] * (LIMIT + 1)
        is_prime[0], is_prime[1] = False, False  
        for i in range(2, int(LIMIT**0.5) + 1):
            if is_prime[i]:
                for j in range(i * i, LIMIT + 1, i):
                    is_prime[j] = False

        primes = [num for num in range(left, right + 1) if is_prime[num]]

        if len(primes) < 2:
            return [-1, -1]  

        res = [-1, -1]
        min_diff = float('inf')

        for i in range(1, len(primes)):
            diff = primes[i] - primes[i - 1]
            if diff < min_diff:
                min_diff = diff
                res = [primes[i - 1], primes[i]]

        return res

# class Solution:
#     def prime(self, num):
#         if num < 2:
#             return False
#         count = 0
#         for i in range(1, num + 1):
#             if num % i == 0:
#                 count += 1
#         return count == 2

#     def closestPrimes(self, left: int, right: int):
#         primes = []
        
#         for num in range(left, right + 1):
#             if self.prime(num):
#                 primes.append(num)
        
#         if len(primes) < 2:
#             return [-1, -1]

#         min_diff = float('inf')
#         result = [-1, -1]

#         for i in range(1, len(primes)):
#             diff = primes[i] - primes[i - 1]
#             if diff < min_diff:
#                 min_diff = diff
#                 result = [primes[i - 1], primes[i]]

#         return result
